{\rtf1\ansi\ansicpg1252\cocoartf1404\cocoasubrtf470
{\fonttbl\f0\fswiss\fcharset0 ArialMT;\f1\fnil\fcharset0 Consolas;\f2\fnil\fcharset0 HelveticaNeue;
\f3\fnil\fcharset0 Monaco;}
{\colortbl;\red255\green255\blue255;\red27\green31\blue34;\red244\green246\blue249;\red100\green100\blue100;
\red127\green0\blue85;\red42\green0\blue255;\red0\green0\blue192;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid1}
{\list\listtemplateid2\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid101\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid102\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li1440\lin1440 }{\listname ;}\listid2}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}{\listoverride\listid2\listoverridecount0\ls2}}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs36 \cf0 Chapter5 Springbok with API\
\ul Step1 Basic setup\ulnone \
Five steps to set up Pom.xml\
1- Spring boot stater parent :\
	- with this no need for version dependencies framework\
2- Spring boot stater web\
3- overriding java version 8( in properties)\
4- Create application launcher:\
\pard\pardeftab720\partightenfactor0

\f1\fs27\fsmilli13600 \cf2 \cb3 \expnd0\expndtw0\kerning0
package com.in28minutes.springboot;\
\
import org.springframework.boot.SpringApplication;\
import org.springframework.boot.autoconfigure.SpringBootApplication;\
import org.springframework.context.ApplicationContext;\
\
@SpringBootApplication\
public class Application \{\
\
	public static void main(String[] args) \{\
		ApplicationContext ctx = SpringApplication.run(Application.class, args);\
\
	\}\
\
\}\

\f0\fs36 \cf0 \cb1 \kerning1\expnd0\expndtw0 Step2: Create first RestController:\
* we actually create a controller to show information with this http address : localhost:8080/welcome\
\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls1\ilvl0
\f2\fs32 \cf2 {\listtext	\'95	}\expnd0\expndtw0\kerning0
What is dependency?\
\ls1\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
@Component\
\ls1\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
@Autowired\
\pard\tx720\pardeftab720\partightenfactor0
\cf2 \
\
When only have one business logic. \
\kerning1\expnd0\expndtw0 	 \expnd0\expndtw0\kerning0
@RestController:\
	 \kerning1\expnd0\expndtw0 @RequestMapping\
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\partightenfactor0
\ls2\ilvl1\cf2 {\listtext	\uc0\u8259 	}example:\
{\listtext	\uc0\u8259 	}
\f3\fs22 \cf4 @RestController\cf0 \
\pard\pardeftab720\partightenfactor0
\ls2\ilvl1\cf5 {\listtext	\uc0\u8259 	}public\cf0  \cf5 class\cf0  WelcomeController \{\
{\listtext	\uc0\u8259 	}\cf4 @RequestMapping\cf0 (\cf6 "/welcome"\cf0 )\
{\listtext	\uc0\u8259 	}\cf5 public\cf0  String welcome() \{\
{\listtext	\uc0\u8259 	}\cf5 return\cf0  \cf6 "This is welcome message"\cf0 ;\
{\listtext	\uc0\u8259 	}\}\
{\listtext	\uc0\u8259 	}\
{\listtext	\uc0\u8259 	}\}
\f2\fs32 \cf2 \expnd0\expndtw0\kerning0
\
\pard\tx720\tx1440\pardeftab720\partightenfactor0

\f0\fs36 \cf0 \kerning1\expnd0\expndtw0 When get more than one than it look more messy we should create another service class for those business logic then call them into CONTROLLER CLASS\
     Example:\
\pard\pardeftab720\partightenfactor0

\f3\fs22 \cf4 @RestController\cf0 \
\cf5 public\cf0  \cf5 class\cf0  WelcomeController \{\
	retrieveMessage \cf7 service\cf0  = \cf5 new\cf0  retrieveMessage();\
	\cf4 @RequestMapping\cf0 (\cf6 "/welcome"\cf0 )\
	\cf5 public\cf0  String welcome() \{\
		\cf5 return\cf0  \cf7 service\cf0 .welcomeMessage();\
	\}\
\
\}\
 \cf5 class\cf0  retrieveMessage \{\
	\cf5 public\cf0  String welcomeMessage() \{\
		\cf5 return\cf0  (\cf6 "This is business logic 1"\cf0 );\
	\}\
	\
\}\
Instead of create new obj with \'93new retrieveMassage\'94 every time we want to use it. We can let Spring do it by using annotation (@Component or @Service) and @Autowired (injected to controller) to do the job:\
\
\cf4 @RestController\cf0 \
\cf5 public\cf0  \cf5 class\cf0  WelcomeController \{\
\ul //@Autowired\'92s job is inject the bean into this controller	\ulnone \
\cf4 @Autowired\cf0 \
	retrieveMessage \cf7 service\cf0  ;\
	\cf4 @RequestMapping\cf0 (\cf6 "/welcome"\cf0 )\
	\cf5 public\cf0  String welcome() \{\
		\cf5 return\cf0  \cf7 service\cf0 .welcomeMessage();\
	\}\
\
\}\
\ul //@Component let Spring manage  this bean and create instance of it\ulnone \
\cf4 @Component\cf0 \
 \cf5 class\cf0  retrieveMessage \{\
	\cf5 public\cf0  String welcomeMessage() \{\
		\cf5 return\cf0  (\cf6 "This is bussiness logic 2: Using Annotation @Service or @Component so controller can call it "\cf0 \
				+ \cf6 "without using 'new retriveMessage' each time is called"\cf0  );\
	\}\
	\
\}\
\
NOTE: @Component/@Service and Autowired usually go together\
\
\ul Basic Spring framework\ulnone \
 How does Spring framework know how to look for beans to manage?\
\
 What annotation Spring look for?:\
 When component is located in \ul different package\ulnone , we have to use @ComponentScan(\'93com.28minutes\'94) to Application class so it can scan the path that include both the component and controller:\
example:\
package com.in28minutes.springboot;\
\
import org.springframework.boot.SpringApplication;\
import org.springframework.boot.autoconfigure.SpringBootApplication;\
import org.springframework.context.ApplicationContext;\
import org.springframework.context.annotation.ComponentScan;\
\
@SpringBootApplication\
\ul NOTE: com.28minutes is parent  of com.in28minutes.service and com.28minutes.controller\
\
\pard\pardeftab720\partightenfactor0
\cf0 \ulnone @ComponentScan("com.in28minutes") \ul \ulc0 \
\pard\pardeftab720\partightenfactor0
\cf0 \ulnone public class Application \{\
\
	public static void main(String[] args) \{\
		ApplicationContext ctx = SpringApplication.run(Application.class, args);\
\
	\}\
\
\}\
  \
\
 What if Spring does not find what is looking for? fail start \
\

\f0\fs36 \
\pard\tx720\tx1440\pardeftab720\partightenfactor0
\cf0 \
\pard\pardeftab720\partightenfactor0
\cf0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \
}